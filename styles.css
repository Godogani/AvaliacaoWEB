/*
    Essas regras padrões são bacanas pra começar, nos dando
    liberdade para colocar as margens e preenchimentos como
    quisermos além de nos dar uma gestão maior de posicionamento
    com nossa regra box-sizing:border-box. Colocamos uma fonte
    padrão para o site para padronizar todos os texto que 
    aparecerem em nossa página e removemos o negrito da página
*/
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: Raleway;
    font-weight: normal;
}

/*
    Aqui vamos começar a estilizar nosso header principal.
    Temos um fundo preto, a cor do texto como branca, um
    preenchimento padding pra dar mais área pro cabeçalho,
    alinhamos o título do header com text-align: right, com 
    isso. Aqui também fornecemos um widht de 100% para que
    a largura seja de todo espaço visível. Por fim um position
    fixed para que a barra fique na mesma posição mesmo rolando a pagina.
*/

.main-header {
    text-align: right;
    background-color: #000000;
    color: #fff;
    padding: 8px 16px;
    width: 100%;
    position: fixed;
    z-index: 3;
}

/*
    Neste momento, estilizamos o tamanho da fonte da nossa logo
    assim como fornecemos um preenchimento adequado a caixa que
    contém nossa logo usando o padding: 8px 16px onde teremos 
    um preenchimento vertial de 8px e um horizontal de 16px.
*/
.main-header span {
    font-size: 18px;
    padding: 8px 16px;
}

/*
    Aqui começamos a estilizar nossa side bar, para isso é aplicado
    um position: fixed para que ela se mantenha na lateral conforme 
    a página seja rolada. Depois, delimitamos sua largura com width
    de 300px, margin-top e background-color para dar o tamanho, 
    posição em relação ao header e cor do plano de fundo.
*/
.aside {
    position: fixed;
    margin-top: 43px;
    height: 100%;
    width: 300px;
    background-color: #fff;
}

/*
    Nessa classe começamos e estilizar o container do usuario, para isso
    aplicamos a propriedade display: flex para transformar os elementos
    de bloco img e aside-profile-info em elementos de linha, feito isso, 
    delimitamos um preenchimento de nosso container além de uma borda 
    inferior para que nosso conteúdo se torne bem espaçado e com uma
    divisória interessante ao usarmos o border-bottom.
*/
.aside-profile {
    display: flex;
    padding: 15px 0;
    border-bottom: 1px solid #f1f1f1;
}

/*
    Com nosso seletor descendente img dentro de .aside-profile nós especificamos
    como a imagem dentro de nosso aside-profile vai se comportar. Delimitamos
    inicialmente uma largura fixa de 46 pixels, tal como uma altura fixa de mesmo tamanho,
    depois um border-radius de 100%para tornar a imagem redonda e por fim aplicamos uma 
    margem à esquerda para que não fique colada na lateral.
*/
.aside-profile img {
    width: 46px;
    height: 46px;
    border-radius: 100%;
    margin-left: 15px;
}

/*
    Para estilizar nossa saudação de boas vindas, delimitamos sua largura como a maior
    possível usando width 100%, depois alinhamos o texto ao centro com text-align e por
    fim, ajustamos o preenchimento da sua caixa com a regra padding 8px 16px.
*/
.aside-welcome {
    width: 100%;
    text-align: center;
    padding: 8px 16px;
}

/*
    Aqui nós aplicamos uma margem à direita de 15px por questão de estética, para
    centralizar melhor nossa informações do perfil.
*/
.aside-profile-info {
    margin-left: 15px;
}

/*
    Nessa classe estilizamos a div que contém nosso fav-icons para que eles sejam 
    reorganizados de modo que sejam igualmente espaçados e equidistantes da mensagem
    de boas vindas. Para que isso ocorra tornamos os elementos de bloco em elementos
    de linha com display:flex e os espaçamos com justify-content: space evenly. Para
    a margin superior só usamos margin-top:10px e delomitamos um preenchimento horizontal
    de 16px.
*/
.aside-profile-items {
    display: flex;
    justify-content: space-evenly;
    margin-top: 10px;
    padding: 0 16px;
    padding-bottom: 30px;
}


/*
    Usamos um seletor descendente em nosso aside *SOMENTE PORQUE É O ÚNICO H3 ALI*
    para customizar nossa string "Dashboard", com isso damos um preenchimento a seu
    espaço com padding-left e padding-top, depois aumentamos sua fonte com font-size
    20px e removemos seu efeito negritado com .
*/
.aside h3 {
    padding-left: 20px;
    font-size: 20px;
    
    padding-top: 30px;
}

/*
    Com essa regra nós usamos o display flex para flexibilizar os itens flex contidos
    dentro do nosso dashboard-links, depois os organizamos em colunas através da regra
    flex-direction: column.
*/
.dashboard-links {
    display: flex;
    flex-direction: column;
}

/*
    Para nossos itens na barra de navegação, fornecemos um preenchimento em todas direções
    de 10px de modo a tornar suas caixas maiores e ao mesmo tempo mais espaçadas.
*/
.dashboard-item {
    padding: 10px;
}

/*
    Na nossa regra à seguir, fornecemos um preenchimento vertical de 10px além de um preenchimento
    horizontal de 20px com a intenção de dar mais visibilidade aos itens de navegação. Depois, 
    removemos o sublinhado dos links, além de padronizarmos a cor do texto como preto. A fonte 
    também é aumentada para 15 pixels.
*/
.dashboard-item {
    padding: 10px 20px;
    text-decoration: none;
    color: #000;
    font-size: 15px;
}

/*
    Nessa regra aplicamos a seleção da aba ativa. Note que usamos o pseudo-seletor :first-child
    para que o primeiro item aplicado com a classe dashboard-item seja estilizado com uma
    background-color de cor azul, seu texto seja branco e a margem do topo seja de 10px. Perceba
    que não é viavel aplicar a margem em todos os itens porque caso contrário ess ficariam muito 
    espaçados entre si, e só queremos que o container contendo todos se disntacie.
*/
.dashboard-item:first-child {
    background-color: #2196f3;
    color: #fff;
    margin-top: 10px;
}

/*
    Aqui aplicamos o pseudoseletor :hover que vai servir de modo que quando o cursor do mouse 
    passe em cima de um dos itens, ele altere seu comportamento mudando de cor. É um comportamento
    bacana de se colocar para itens selecionáveis. Mesmo com o pseudo-seletor anterior, ele ainda 
    é aplicado a .dashboard-item:first-child sem precisar remover a margem.
*/
.dashboard-item:hover {
    background-color: #ccc;
    color: black;
}



/*
    Aqui aplicamos uma margem equivalente a nossa side-bar, depois um preenchimento de 43px top, 
    0 px right e bottom e 18px left, depois selecionamos a cor do plano de fundo do conteúdo geral
    com background-color.
*/
.main {
    margin-left: 300px;
    padding: 43px 0 0 18px;
    background-color: #f1f1f1;
}

/*
    Muito cuidado ao usar esse seletor descendente. Aqui todos as tags h3 que estiverem em nosso feed
    terão um padding próprio de 24px top 0px right 12px bottom e 0px left. Caso estilizassemos somente
    uma tag h3 contida diretamente no main, deveriamos aplicar :first-child ou dar uma classe particular
    para o <h3>.
*/
.main h3 {
    padding: 24px 0 12px 0;
}

/*
    Nessa regra começamos a estilizar nossa barra de status, aplicamos display flex para aplicar
    comportamento de linha e justify-content: space-evely para espaçar adequadamente todos nossos
    itens.
*/
.status-bar {
    display: flex;
    justify-content: space-evenly;
}

/* 
    Como querermos todos os itens na mesma linha, colocamos width de 100% para que todos eles se ajustem
    com o tamanho máximo possível, depois aplicamos margem, cor e preenchimento.
*/
.status {
    width: 100%;
    padding: 16px 0;
    color: #fff;
    margin-right: 12px;
}

/*
    Aqui começamos e estilizar nossas caixas, com isso aplicamos um display flex para que todo o conteúdo
    fique em uma linha e depois alinhado com space-between. Seu alinhamento horizontal é dado com align-items
    center e por fim recebemos um preenchimento.
*/
.status-box {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0 16px;
}

/*
    Nessa regra .to-left, estilizamos nosso fav icon à esquerda. Aplicamos fonte de 50px.
*/
.to-left {
    font-size: 50px;
}

/*
    Nessa regra estilizamos o número à direita aumentando o tamanho de seu texto.
*/
.to-right h3 {
    font-size: 25px;
    
}

/*
    Deixamos um negrito de tamanho 100 com font-weight 100 e nosso querido preenchimento.
*/
.status-title {
    font-weight: 100;
    padding: 8px 16px;
}

/*
    As classes à seguir servem para mudar a cor do background dos nossos status.
*/
.red {
    background-color: #f44336;
}

.blue {
    background-color: #2196f3;
}

.green {
    background-color: #009688;
}

.yellow {
    background-color: #ff9800;
}



/*
    Aplicamos um display flex para que os itens se comportem como elementos de linha.
*/
.region-feed {
    display: flex;
}

/*
    Aplicamos uma margem à esquerda para separação de conteúdo e um width para que ocupe
    100% do espaço possível.
*/
.feed {
    margin-left: 20px;
    width: 100%;
}


/*
    Começamos a estilizar nossa tabela usando border-collapse: collapse para que não haja
    bordas dividindo as linhas e colunas além de um widht:100% para abrigar toda largura.
*/
.table{
    border-collapse: collapse;
    width: 100%;
}

/*
    Aqui aplicamos um background branco para todas as colunas que sejam filhos ímpares
    da nossa classe row.
*/
.row:nth-child(odd){
    background-color: #fff;
}

/*
    Nessa regra aumentamos a font-size de nossos textos, além de dar um preenchimento.
*/
.table-text{
    font-size: 18px;
    padding: 12px 16px;
}

/*
    Nas próximas regras estilizamos a cor do texto.
*/
.text-red{
    color:#f44336;
}
.text-blue{
    color:#2196f3;
}
.text-yellow{
    color:#ff9800;
}
.text-green{
    color:#4CAF50;
}


/*
    Aplicamos um preenchimento vertical para nosso título para fim de distanciamento.
*/
.progress-title{
    padding: 20px 0;
}

/*
    Selecionamos nossa barra de progresso aplicando um fundo padrão e um width de 100%
    para que ocupe todo o espaço visual disponivel.
*/
.progress-bar{
    width:100%;
    background-color: #9E9E9E;
}

/*
    Usamos position relative para que nosso componente seja sobreposto com o progress-bar
    depois disso aplicamos um perenchimento vertical para dar mais volume, alinhamos o texto
    ao centro e por fim aplicamos a cor branca ao texto.
*/
.percentage{
    position: relative;
    padding: 10px 0;
    text-align: center;
    color: #fff;
}

/*
    À seguir aplicamos as devidas colorações de fundo e porcentagens de cada elemento subsequente.
    Note que mudamos novamente a cor do texto para preto em progress-yellow.
*/
.progress-green{
    width: 25%;
    background-color: #4CAF50;
}
.progress-yellow{
    width: 50%;
    background-color: #ff9800;
    color: #000;
}
.progress-red{
    width: 75%;
    background-color: #f44336;
}











/*
    Para nosso pre-footer colocamos display flex para tornar nosso conteúdo flexível
    depois, escolhemos a cor do background e uma margin à esquerda negativa para suprir
    a margem aplicada anteriormente em .main de modo que nosso plano de fundo cubra tudo.
    É aplicada uma cor branca no texto e fonecer um padding à esquerda para que o conteúdo 
    não fique colado a side-bar.
*/
.pre-footer {
    display: flex;
    background-color: #616161;
    margin-left: -18px;
    color: #fff;
    padding-left: 20px;
}

/*
    Nesse momento começamos a estilizar as boxes do pre-footer dando um widht de 33%
    para os conteúdos, depois, aplicamos um preenchimento de 32px verticais e 16px
    horizontais.
*/
.pre-footer-box {
    padding: 32px 16px;
    width: 33%;
}

/*
    Nas classes a seguir estilizamos uma borda inferior e suas corres correspondentes.
*/
.demo {
    border-bottom: 6px solid #4CAF50;
}

.system {
    border-bottom: 6px solid #f44336;
}

.target {
    border-bottom: 6px solid #ff9800;
}

/*
    Vamos estilizar os p dentro de nosso pre-footer com a intenção de darmos um preenchimento
    vertical de 8px e uma margem lateral de -16 para alinhas com o título do pre-footer.
*/
.pre-footer p {
    padding: 8px 0;
    margin-left: -16px;
}



/*
    À PARTIR DAQUI TUDO É APLICADO COM SELEÇÃO DE TAG POIS É O ÚNICO LOCAL DA PÁGINA COM FOOTER.
    EM CASOS COM MAIS DE UM FOOTER NÃO REALIZAR ISSO.

    Aplicamos uma altura fixa de 120px.
*/
footer {
    height: 120px;
}

/*
    Fornecemos um preenchimento horizontal nulo, um top de 20px e um bottom de 10px.
*/
footer h3 {
    padding: 20px 0 10px 0;
}

/*
    Mudamos a cor do link dentro do footer.
*/
footer span a {
    color: black;
}